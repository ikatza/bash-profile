# -*- mode: sh -*-

# mirror directory
if [[ "$HOSTNAME" =~ "gpvm" ]]; then
    if [[ "$PWD" =~ "/app/users/$USER" ]]; then
        export M=$(echo $PWD | sed -e "s|app/users|data/users|g")
        export MI=$(echo ${PWD%/*} | sed -e "s|app/users|data/users|g")
    fi
    if [[ "$PWD" =~ "/data/users/$USER" ]]; then
        export M=$(echo $PWD | sed -e "s|data/users|app/users|g")
        export MI=$(echo ${PWD%/*} | sed -e "s|data/users|app/users|g")
    fi
fi

#Start VNC server
function vnc_start() {
    VNCNUM=${1:-09}
    if [[ `hostname` == *"gpvm"* ]] #only start VNC servers on the gpvms (i.e. not on the build machines)
    then
        export DISPLAY=localhost:$VNCNUM #Export the display to point to the VNC server
        if [ `lsof -i -P -n | grep $(expr 5900 + ${VNCNUM}) | wc -l` -eq 0 -o `lsof -i -P -n | grep $(expr 6000 + ${VNCNUM}) | wc -l` -eq 0 ]
        then
            echo "vncserver :$VNCNUM not running.  Starting now...."
            vncserver :$VNCNUM -localhost -bs    #Check if the VNC server is running and start it if not (-localhost mandatory!)
        else
            echo "vncserver :$VNCNUM already running (hopefully owned by you).  Not attempting to start the vncserver..." 
        fi
    fi
}

# utility to setup the current version of products
# to run do:
#  setup `latest product`
function latest () {
    product=$1
    quals=$2
    version=v`ups list -aK"VERSION" $product $quals | uniq | sed -e 's/v//' -e 's/\"//g' | sort -n | tail -1`
    if [ "X$quals" == "X" ]; then
        quals=`ups list -aK"QUALIFIERS" $product $version | grep "prof" | grep -v "noifdh" | sed -e 's/\"//g' | uniq | sort -n | tail -1`
        if [ "X$quals" != "X" ]; then
            quals="-q$quals"
        fi
    fi

    echo "$product $version $quals"
}

function sors() {
    if [[ "$HOSTNAME" =~ "daq" && "$HOSTNAME" =~ "sbn" ]]; then
        source /daq/software/products/setup
        setup mrb
        setup `latest ninja`
    fi
    if [[ "$HOSTNAME" =~ "gpvm" || "$HOSTNAME" =~ "build" ]]; then
        if [[ "$HOSTNAME" =~ "dune" ]]; then
            source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
        fi
        if [[ "$HOSTNAME" =~ "sbnd" ]]; then
            source /cvmfs/sbnd.opensciencegrid.org/products/sbnd/setup_sbnd.sh
        fi
    fi
}

function sorss() {
    source /cvmfs/uboone.opensciencegrid.org/products/setup
    source /cvmfs/sbnd.opensciencegrid.org/products/sbnd/setup
    source /cvmfs/icarus.opensciencegrid.org/products/icarus/setup_icarus.sh
}

function certifyme() {
    setup cigetcert # (if not already there)
    cigetcert -s 'fifebatch.fnal.gov' # ask for a certificate
    voms-proxy-init -noregen -rfc -voms 'fermilab:/fermilab/sbnd/Role=Analysis'
}

function init_profiler(){
    outputfile=${1:-performance.prof}
    outputfile_heap=${1:-performance.heap}
    export PERFTOOLS=/grid/fermiapp/nova/perftools
    source $PERFTOOLS/perftools.sh
    export DATAPATH=$PWD
    # export HEAPCHECK=1
    export HEAPPROFILE=$PWD/$outputfile_heap
    export CPUPROFILE=$PWD/$outputfile
    echo -e "Run like so for CPU only:\n  \tmrbslp; env LD_PRELOAD=$PERFTOOLS/lib/libprofiler.so lar -c myfcl.fcl ..."
    echo -e "Run like so for CPU and MEMORY:\n  \tmrbslp; env LD_PRELOAD=$PERFTOOLS/lib/libtcmalloc_and_profiler.so lar -c myfcl.fcl ..."
    echo "To analyse the output:"
    echo -e "\t pprof --pdf \`which lar\` $outputfile > $outputfile.pdf"
    echo -e "\t pprof --pdf \`which lar\` $outputfile_heap.0189.heap > $outputfile_heap.pdf"
    echo -e "\t pprof --text \`which lar\` $outputfile"
}

alias ninja_='ninja -C ${MRB_BUILDDIR} -k 0 install | grep --invert-match "Up-to-date" '
